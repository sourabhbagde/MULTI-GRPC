// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/library.proto

package librarypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LibraryService_AddBook_FullMethodName            = "/LibraryService/AddBook"
	LibraryService_ListAvailableBooks_FullMethodName = "/LibraryService/ListAvailableBooks"
	LibraryService_BorrowBooks_FullMethodName        = "/LibraryService/BorrowBooks"
	LibraryService_LiveBookUpdates_FullMethodName    = "/LibraryService/LiveBookUpdates"
)

// LibraryServiceClient is the client API for LibraryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The library service definition.
type LibraryServiceClient interface {
	// unary RPCs: The client sends a single request to the server and gets a single response back, just like a normal function call.
	// sends book request and get details as book response.
	AddBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*BookResponse, error)
	// server streaming RPCs: sends empty request and response as stream available of list of books.
	ListAvailableBooks(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BookResponse], error)
	// client streaming RPCs: sends stream of the borrow request request and response as the borrow status
	BorrowBooks(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[BorrowRequest, BorrowStatus], error)
	// bidirectional streaming RPCs: sends stream of borrow request and response of stream book response
	LiveBookUpdates(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BorrowRequest, Book], error)
}

type libraryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibraryServiceClient(cc grpc.ClientConnInterface) LibraryServiceClient {
	return &libraryServiceClient{cc}
}

func (c *libraryServiceClient) AddBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*BookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookResponse)
	err := c.cc.Invoke(ctx, LibraryService_AddBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) ListAvailableBooks(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BookResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LibraryService_ServiceDesc.Streams[0], LibraryService_ListAvailableBooks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EmptyRequest, BookResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LibraryService_ListAvailableBooksClient = grpc.ServerStreamingClient[BookResponse]

func (c *libraryServiceClient) BorrowBooks(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[BorrowRequest, BorrowStatus], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LibraryService_ServiceDesc.Streams[1], LibraryService_BorrowBooks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BorrowRequest, BorrowStatus]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LibraryService_BorrowBooksClient = grpc.ClientStreamingClient[BorrowRequest, BorrowStatus]

func (c *libraryServiceClient) LiveBookUpdates(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BorrowRequest, Book], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LibraryService_ServiceDesc.Streams[2], LibraryService_LiveBookUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BorrowRequest, Book]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LibraryService_LiveBookUpdatesClient = grpc.BidiStreamingClient[BorrowRequest, Book]

// LibraryServiceServer is the server API for LibraryService service.
// All implementations must embed UnimplementedLibraryServiceServer
// for forward compatibility.
//
// The library service definition.
type LibraryServiceServer interface {
	// unary RPCs: The client sends a single request to the server and gets a single response back, just like a normal function call.
	// sends book request and get details as book response.
	AddBook(context.Context, *BookRequest) (*BookResponse, error)
	// server streaming RPCs: sends empty request and response as stream available of list of books.
	ListAvailableBooks(*EmptyRequest, grpc.ServerStreamingServer[BookResponse]) error
	// client streaming RPCs: sends stream of the borrow request request and response as the borrow status
	BorrowBooks(grpc.ClientStreamingServer[BorrowRequest, BorrowStatus]) error
	// bidirectional streaming RPCs: sends stream of borrow request and response of stream book response
	LiveBookUpdates(grpc.BidiStreamingServer[BorrowRequest, Book]) error
	mustEmbedUnimplementedLibraryServiceServer()
}

// UnimplementedLibraryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLibraryServiceServer struct{}

func (UnimplementedLibraryServiceServer) AddBook(context.Context, *BookRequest) (*BookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBook not implemented")
}
func (UnimplementedLibraryServiceServer) ListAvailableBooks(*EmptyRequest, grpc.ServerStreamingServer[BookResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListAvailableBooks not implemented")
}
func (UnimplementedLibraryServiceServer) BorrowBooks(grpc.ClientStreamingServer[BorrowRequest, BorrowStatus]) error {
	return status.Errorf(codes.Unimplemented, "method BorrowBooks not implemented")
}
func (UnimplementedLibraryServiceServer) LiveBookUpdates(grpc.BidiStreamingServer[BorrowRequest, Book]) error {
	return status.Errorf(codes.Unimplemented, "method LiveBookUpdates not implemented")
}
func (UnimplementedLibraryServiceServer) mustEmbedUnimplementedLibraryServiceServer() {}
func (UnimplementedLibraryServiceServer) testEmbeddedByValue()                        {}

// UnsafeLibraryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibraryServiceServer will
// result in compilation errors.
type UnsafeLibraryServiceServer interface {
	mustEmbedUnimplementedLibraryServiceServer()
}

func RegisterLibraryServiceServer(s grpc.ServiceRegistrar, srv LibraryServiceServer) {
	// If the following call pancis, it indicates UnimplementedLibraryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LibraryService_ServiceDesc, srv)
}

func _LibraryService_AddBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).AddBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_AddBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).AddBook(ctx, req.(*BookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_ListAvailableBooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LibraryServiceServer).ListAvailableBooks(m, &grpc.GenericServerStream[EmptyRequest, BookResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LibraryService_ListAvailableBooksServer = grpc.ServerStreamingServer[BookResponse]

func _LibraryService_BorrowBooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibraryServiceServer).BorrowBooks(&grpc.GenericServerStream[BorrowRequest, BorrowStatus]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LibraryService_BorrowBooksServer = grpc.ClientStreamingServer[BorrowRequest, BorrowStatus]

func _LibraryService_LiveBookUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibraryServiceServer).LiveBookUpdates(&grpc.GenericServerStream[BorrowRequest, Book]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LibraryService_LiveBookUpdatesServer = grpc.BidiStreamingServer[BorrowRequest, Book]

// LibraryService_ServiceDesc is the grpc.ServiceDesc for LibraryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LibraryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LibraryService",
	HandlerType: (*LibraryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBook",
			Handler:    _LibraryService_AddBook_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListAvailableBooks",
			Handler:       _LibraryService_ListAvailableBooks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BorrowBooks",
			Handler:       _LibraryService_BorrowBooks_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "LiveBookUpdates",
			Handler:       _LibraryService_LiveBookUpdates_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/library.proto",
}
